name: build and test

on:
  push:
  create:
  pull_request:
  schedule:
    - cron: '20 4 * * *'
  workflow_dispatch:

jobs:
  job:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: cache deno installation and deno.land dependencies
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-deno-${{ hashFiles('**/*') }}
          restore-keys: ${{ runner.os }}-deno-
          path: |
            /home/runner/.deno
            /home/runner/.cache/deno/deps/https/deno.land

      - name: install or update deno installation
        run: |
          export DENO_INSTALL="/home/runner/.deno"
          export PATH="${DENO_INSTALL}/bin:${PATH}"
          mkdir -p "${DENO_INSTALL}"
          deno upgrade || (
            curl -fsSL https://deno.land/x/install/install.sh > "${DENO_INSTALL}/.sh";
            sh "${DENO_INSTALL}/.sh"
          )
          deno --version
          deno info
          echo "DENO_INSTALL=${DENO_INSTALL}" >> "${GITHUB_ENV}"
          echo "PATH=${PATH}" >> "${GITHUB_ENV}"

      - name: set reproducible build environment
        run: |
          echo "SOURCE_DATE_EPOCH=1577836800" >> "${GITHUB_ENV}"
          echo "TZ=UTC" >> "${GITHUB_ENV}"
          echo "LC_ALL=C" >> "${GITHUB_ENV}"

      - name: install rust toolchain build dependencies
        run: sudo apt-get install gcc-mingw-w64-x86-64

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu

      - name: install wasm pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: latest

      - name: build generated files
        id: build
        run: |
          ./_build.ts
          git status
          declare had_changes="$(
            [[ -n "$(git status --porcelain)" ]] && echo true || echo false
          )"
          echo "::set-output name=had-changes::${had_changes}"

      - name: refresh published pages if running on schedule
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          echo "DENO_STADIA_GOOGLE_COOKIE=${{ secrets.GOOGLE_COOKIE }}" >> "${GITHUB_ENV}"
          ./mod.ts stadia.run

      - name: commit and push generated files
        if: success() && steps.build.outputs.had-changes == 'true' && (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          declare br="
          "
          declare branch="$(echo ${GITHUB_REF#refs/heads/})"
          declare date="$(git log -1 --pretty=format:'%ad')"
          declare short_hash="$(git rev-parse --short=8 HEAD)"
          declare short_subject="$(git log -1 --pretty=format:'%s')"
          declare short_subject="$(git log -1 --pretty=format:'%s')"
          if [[ ${#short_subject} -gt 50 ]]; then
            short_subject="${short_subject:0:49}…"
          fi
          declare author_name="$(git log -1 --pretty=format:'%an')"
          declare author_email="$(git log -1 --pretty=format:'%ae')"
          declare current_action_url="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}"

          export GIT_AUTHOR_DATE="${date}"
          export GIT_AUTHOR_NAME="${author_name}"
          export GIT_AUTHOR_EMAIL="${author_email}"

          export GIT_COMMITTER_DATE="${date}"
          export GIT_COMMITTER_NAME="deno-stadia"
          export GIT_COMMITTER_EMAIL="deno-stadia@stadians.dev"

          git remote rm origin
          git remote add origin "https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          git checkout "${branch}"

          git add .
          git commit -m "⚙️ rebuild ${short_hash} (${short_subject})${br}${br}${current_action_url}"
          git push --set-upstream origin "${branch}"

      - name: fetch any uncached dependencies
        run: |
          deno cache --reload=file: ./mod.ts

      - run: |
          deno info ./mod.ts

      - run: |
          deno test --allow-none

      - run: |
          deno run mod.ts

      - run: |
          deno run ./mod.ts -?

      - run: |
          deno install --force --allow-all --name stadia ./mod.ts
          stadia --help

      - run: |
          deno bundle mod.ts dist/bundle.js
          deno run dist/bundle.js
        continue-on-error: true

      - name: check lint
        run: |
          git clean -xdf
          echo "::add-matcher::.github/matchers/deno-lint.json"
          NO_COLOR= deno --unstable lint **/*.ts || :
          echo "::remove-matcher::.github/matchers/deno-lint.json"

      - name: fail if generated files are out-of-date and we can't push
        if: success() && steps.build.outputs.had-changes == 'true' && !(github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          echo "Generated files are out-of-date!"
          git status
          exit 1
